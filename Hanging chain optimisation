clc;                             % clear command window/console
clear;                           % clear workspace                                      
close all;                       % close all windows (plots)

import casadi.*

% create empty optimization problem
opti = casadi.Opti();

N = 40;                     % number of masses

% TODO: complete the definition of variables HERE
% HINT: opti.variable(n) creates a column vector of size n
%       opti.variable(n,m) creates a n-by-m matrix
%       so opti.variable(n,1) is the same as opti.variable(n)
y = opti.variable(N);
z = opti.variable(N);

m = 4/N;                    % mass
D = (70/40)*N;             % spring constant
g0 = 9.81;                  % gravity

Vchain = 0;
for i = 1:N
     % TODO: complete the objective function (i.e. potential energy) HERE
     if i < N 
        Vchain = Vchain + 0.5*D*((y(i)-y(i+1))^2 + (z(i) - z(i+1))^2) + m*g0*z(i);
     else
        Vchain = Vchain + m*g0*z(i);
     end
end

disp(Vchain)
% 
 % pass objective to opti
opti.minimize(Vchain)
% 
% TODO: complete the (equality) constraints HERE
opti.subject_to( y(1) == -2 );
opti.subject_to( y(N) == 2 );
opti.subject_to( z(1) == 1 );
opti.subject_to( z(N) == 1 );

for i= 2:N-1
    opti.subject_to(z(i) >= 0.5 );
    opti.subject_to(z(i) - 0.1*y(i)>=0.5);
    opti.subject_to(z(i) >= -0.2+0.1*y(1).^2 );
    opti.subject_to(z(i) >= -y(1).^2 );
end
% % Setting solver and solving the problem:
opti.solver('ipopt')
sol = opti.solve();
% 
% % get solution and plot results
Y = sol.value(y);
Z = sol.value(z);
% 
figure;
plot(Y,Z,'--or'); hold on;
plot(-2,1,'xg','MarkerSize',10);
plot(2,1,'xg','MarkerSize',10);
xlabel('y'); ylabel('z');
title('Optimal solution hanging chain (without extra constraints)')

